// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ReactApp1.Server.Models;

public partial class SQLServerContext : DbContext
{
    public SQLServerContext(DbContextOptions<SQLServerContext> options)
        : base(options)
    {
    }

    public override int SaveChanges()
    {
        var AddedEntities = ChangeTracker.Entries()
            .Where(E => E.State == EntityState.Added)
            .ToList();

        AddedEntities.ForEach(E =>
        {
            E.Property("CreateTime").CurrentValue = DateTime.Now;
        });

        //var EditedEntities = ChangeTracker.Entries()
        //    .Where(E => E.State == EntityState.Modified)
        //    .ToList();

        //EditedEntities.ForEach(E =>
        //{
        //    E.Property("ModifiedDate").CurrentValue = DateTime.Now;
        //});

        return base.SaveChanges();
    }
    public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
    {
        var AddedEntities = ChangeTracker.Entries()
            .Where(E => E.State == EntityState.Added)
            .ToList();

        AddedEntities.ForEach(E =>
        {
            E.Property("CreationTime").CurrentValue = DateTime.Now;
        });

        //var EditedEntities = ChangeTracker.Entries()
        //    .Where(E => E.State == EntityState.Modified)
        //    .ToList();

        //EditedEntities.ForEach(E =>
        //{
        //    E.Property("ModifiedDate").CurrentValue = DateTime.Now;
        //});

        return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
    }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Post>(entity =>
        {
            entity.ToTable("Post");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("text");

            entity.HasOne(d => d.User).WithMany(p => p.Posts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Post_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreateTime).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}